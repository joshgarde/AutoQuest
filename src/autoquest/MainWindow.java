/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autoquest;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import autoquest.NarrativeDust;
import com.mashape.unirest.http.Unirest;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.headless.HeadlessMediaPlayer;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author ncc
 */
public class MainWindow extends javax.swing.JFrame implements ActionListener {
    
    private int level;
    private CharacterSheet characterSheet;
    private DefaultListModel characterSheetModel = new DefaultListModel();
    private boolean intro = true;
    private Timer mainLoop = new Timer(100, this);
    private DefaultListModel mobList = new DefaultListModel();
    private DefaultListModel inventoryList = new DefaultListModel();
    private DefaultListModel equipmentList = new DefaultListModel();
    private String currentMob;
    private ItemList item = new ItemList();
    private String currentQuest;
    private String currentJohnRepo;
    private Random random = new Random();
    private int currentItemIndex;
    private HeadlessMediaPlayer mediaPlayer;
    private ArrayList<String> johnRepos = new ArrayList<String>();
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        MediaPlayerFactory mediaPlayerFactory = new MediaPlayerFactory();
        mediaPlayer = mediaPlayerFactory.newHeadlessMediaPlayer();        
    
        initComponents();
    }

    @Override
    public void setVisible(boolean v) {
        super.setVisible(v);
        mainLoop.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        characterSheetList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryListView = new javax.swing.JList<>();
        narrativeProgressBar = new javax.swing.JProgressBar();
        nameLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        narrativeField = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        levelLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mobListView = new javax.swing.JList<>();
        killingProgressBar = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        dlcCheckbox = new javax.swing.JCheckBox();
        johnCheckbox = new javax.swing.JCheckBox();
        hdRemixCheckbox = new javax.swing.JCheckBox();
        sortMobListButton = new javax.swing.JButton();
        sellingProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fallout 76");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Character Sheet");

        characterSheetList.setModel(characterSheetModel);
        characterSheetList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(characterSheetList);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Inventory");

        inventoryListView.setModel(inventoryList);
        inventoryListView.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                inventoryListViewComponentAdded(evt);
            }
        });
        jScrollPane2.setViewportView(inventoryListView);

        nameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        nameLabel.setText("Name");

        narrativeField.setEditable(false);
        narrativeField.setFont(new java.awt.Font("Papyrus", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(narrativeField);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Equipment");

        jList3.setModel(equipmentList);
        jScrollPane4.setViewportView(jList3);

        levelLabel.setText("Level: 0");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Killing Queue");

        mobListView.setModel(mobList);
        jScrollPane5.setViewportView(mobListView);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Gameplay Options");

        dlcCheckbox.setLabel("DLC Content");
        dlcCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlcCheckboxActionPerformed(evt);
            }
        });

        johnCheckbox.setLabel("John O'Connor");
        johnCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                johnCheckboxActionPerformed(evt);
            }
        });

        hdRemixCheckbox.setText("HD Remix");
        hdRemixCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hdRemixCheckboxActionPerformed(evt);
            }
        });

        sortMobListButton.setText("Sort Monsters (bubble)");
        sortMobListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortMobListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(narrativeProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(levelLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sellingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1)
                                .addGap(102, 102, 102)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(killingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(johnCheckbox)
                                            .addComponent(hdRemixCheckbox)
                                            .addComponent(jLabel7)
                                            .addComponent(dlcCheckbox)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                            .addComponent(sortMobListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(levelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(narrativeProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(jLabel6))
                            .addComponent(killingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(sortMobListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dlcCheckbox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(johnCheckbox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hdRemixCheckbox))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(sellingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        levelLabel.getAccessibleContext().setAccessibleName("Current Level: 0");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void actionPerformed(ActionEvent e) {
        // Intro sequence
        if (intro) {
            narrativeProgressBar.setValue(narrativeProgressBar.getValue() + 1);
            if (narrativeProgressBar.getValue() <= 30) {
                this.narrativeField.setText("You awake in a darkened forest in the middle of nowhere.");
                return;
            } else if (narrativeProgressBar.getValue() <= 50) {
                this.narrativeField.setText("You have nothing but the clothes on your back and your fists.");
                return;
            } else if (narrativeProgressBar.getValue() <= 60) {
                this.narrativeField.setText("You are cold.");
                return;
            } else if (narrativeProgressBar.getValue() <= 70) {
                this.narrativeField.setText("You are alone.");
                return;
            } else if (narrativeProgressBar.getValue() <= 90) {
                this.narrativeField.setText("With your remaining strength, you pick yourself up and venture into the forest");
                return;
            } else if (narrativeProgressBar.getValue() < 100){
                this.narrativeField.setText("This is your story.");
                return;
            } else {
                intro = false;
                narrativeProgressBar.setValue(0);
                mainLoop.setDelay(50);
                setLevel(1);
                return;
            }
        }
        
        // Main game loop
        if (narrativeProgressBar.getValue() == 1) {
            System.out.println("[Fallout76] TODO: Add CreditCardPaymentDialog");
            currentQuest = QuestList.fetchQuest();
            this.narrativeField.setText(NarrativeDust.motivationGenerator() + currentQuest);
        } else if (narrativeProgressBar.getValue() == 10) {
            this.narrativeField.setText("Monsters surround you as you begin your quest. You must fight to survive");
            for (int i = 0; i < 12; i++) {
                if (johnCheckbox.isSelected()) {
                    if (i == 0) {
                        mobList.addElement("THE REAL John O'Connor");
                    } else {
                        mobList.addElement("John O'Connor");
                    }
                } else if (dlcCheckbox.isSelected()) {
                    if (currentJohnRepo == null) {
                        currentJohnRepo = johnRepos.get(0);
                    } else {
                        currentJohnRepo = findNextRepoMob(currentJohnRepo);
                    }
                    mobList.addElement(currentJohnRepo);
                } else {
                    System.out.println(currentQuest);
                    mobList.addElement(KillingList.generateMonster(currentQuest));
                }
            }
        } else if (narrativeProgressBar.getValue() < 15) {
        } else if (narrativeProgressBar.getValue() >= 15 && narrativeProgressBar.getValue() < 75) {
            if (killingProgressBar.getValue() == 0) {
                currentMob = (String)mobList.get(0);
                narrativeField.setText("Now battling " + currentMob + ". " + NarrativeDust.difficultyGenerator());
            }
            if (killingProgressBar.getValue() != 100) {
                killingProgressBar.setValue(killingProgressBar.getValue() + 1);
                return;
            } else {
                mobList.remove(0);
                killingProgressBar.setValue(0);
                narrativeProgressBar.setValue(narrativeProgressBar.getValue() + 5);
                inventoryList.insertElementAt(item.dropItem(), random.nextInt(inventoryList.size() + 1));
                inventoryListView.ensureIndexIsVisible(inventoryList.size() - 1);
                return;
            }
        } else if (narrativeProgressBar.getValue() >= 75 && narrativeProgressBar.getValue() < 87) {
            if (sellingProgressBar.getValue() == 0) {
                String item;
                do {
                    currentItemIndex = random.nextInt(inventoryList.size());
                    item = (String)inventoryList.get(currentItemIndex);
                } while (item.equals("One Gold"));
                narrativeField.setText("Now selling a " + item);
                inventoryListView.ensureIndexIsVisible(currentItemIndex);
            }
            if (sellingProgressBar.getValue() != 100) {
                sellingProgressBar.setValue(sellingProgressBar.getValue() + 1);
                return;
            } else {
                String currentItem = (String)inventoryList.get(currentItemIndex);
                inventoryList.remove(currentItemIndex);
                for (int i = 0; i < ItemList.dropPrice(currentItem); i++) {
                    inventoryList.add(random.nextInt(inventoryList.size()), "One Gold");
                }
                sellingProgressBar.setValue(0);
                narrativeProgressBar.setValue(narrativeProgressBar.getValue() + 1);
                return;
            }
        } else if (narrativeProgressBar.getValue() >= 87 && narrativeProgressBar.getValue() < 95) {
            narrativeField.setText("Tired from your last adventure, you take a short rest in the forest...");
        } else if (narrativeProgressBar.getValue() >= 95 && narrativeProgressBar.getValue() < 99) {
            narrativeField.setText("Until next time.");
        } else {
            narrativeProgressBar.setValue(0);
            setLevel(level + 1);
        }
        narrativeProgressBar.setValue(narrativeProgressBar.getValue() + 1);
    }
    
    private void setLevel(int level) {
        this.level = level;
        this.levelLabel.setText("Level: " + String.valueOf(level));
        equipmentList.addElement(Equipment.levelUp(level));
    }
    
    /* Uses binary search to find the next repo to fight */
    private String findNextRepoMob(String previous) {
        int odd = johnRepos.size() % 2;
        List<String> left = johnRepos.subList(0, (johnRepos.size() / 2) + odd);
        List<String> right = johnRepos.subList((johnRepos.size() / 2) + odd, johnRepos.size());
        while (true) {
            List<String> tmp;
            int comparison = previous.compareTo(left.get(left.size() - 1));
            if (comparison > 0) {
                tmp = right;
                odd = tmp.size() % 2;
                left = tmp.subList(0, (tmp.size() / 2) + odd);
                right = tmp.subList((tmp.size() / 2) + odd, tmp.size());
            } else if (comparison < 0) {
                tmp = left;
                odd = tmp.size() % 2;
                left = tmp.subList(0, (tmp.size() / 2) + odd);
                right = tmp.subList((tmp.size() / 2) + odd, tmp.size());
            } else {
                return right.get(0);
            }
            
            if (right.size() == 1) {
                return right.get(0);
            }
        }
    }
    
    private void dlcCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlcCheckboxActionPerformed
        if (dlcCheckbox.isSelected() && johnRepos.size() == 0) {
            System.out.println("[Fallout76] Loading DLC content...");
            try {
                int page = 1;
                while (true) {
                    JSONArray response = Unirest.get("https://api.github.com/users/sax1johno/repos")
                            .basicAuth("joshgarde", "e5b49807a952a70371a7969ef2bb4091f0067257")
                            .queryString("page", page)
                            .asJson().getBody().getArray();
                    if (response.isEmpty()) break;
                    for (Iterator i = response.iterator(); i.hasNext();) {
                        johnRepos.add(((JSONObject)i.next()).getString("full_name"));
                    }
                    page++;
                }
            } catch (Exception e) {
                System.out.println("[Fallout76] Error fetching John's Repos: " + e.getMessage());
            }
            System.out.println("[Fallout76] DLC Loaded!");
        }
    }//GEN-LAST:event_dlcCheckboxActionPerformed

    private void johnCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_johnCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_johnCheckboxActionPerformed

    private void sortMobListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortMobListButtonActionPerformed
        boolean sorted;
        do {
            sorted = true;
            for (int i = 0; i < mobList.size() - 1; i += 1) {
                if (((String)mobList.get(i)).compareTo((String)mobList.get(i + 1)) < 0) {
                    Object tmp = mobList.get(i);
                    mobList.set(i, mobList.get(i + 1));
                    mobList.set(i + 1, tmp);
                    sorted = false;
                }
            }
        } while (!sorted);
    }//GEN-LAST:event_sortMobListButtonActionPerformed

    private void inventoryListViewComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_inventoryListViewComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_inventoryListViewComponentAdded

    private void hdRemixCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hdRemixCheckboxActionPerformed
        if (hdRemixCheckbox.isSelected()) {
            for (Component c : getContentPane().getComponents()) {
                Font font = c.getFont();
                Font hdFont = new Font(font.getName(), font.getStyle(), font.getSize() * 2);
                c.setFont(hdFont);
            }
            this.setSize(this.getSize().width * 2, this.getSize().height * 2);
            mediaPlayer.playMedia("hd-remix.mp3");
        } else {
            for (Component c : getContentPane().getComponents()) {
                Font hdFont = c.getFont();
                Font font = new Font(hdFont.getName(), hdFont.getStyle(), hdFont.getSize() / 2);
                c.setFont(font);
            }
            this.setSize(this.getSize().width / 2, this.getSize().height / 2);
            mediaPlayer.stop();
        }
    }//GEN-LAST:event_hdRemixCheckboxActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow window = new MainWindow();
                window.setVisible(true);
                window.mainLoop.start();
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> characterSheetList;
    private javax.swing.JCheckBox dlcCheckbox;
    private javax.swing.JCheckBox hdRemixCheckbox;
    private javax.swing.JList<String> inventoryListView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox johnCheckbox;
    private javax.swing.JProgressBar killingProgressBar;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JList<String> mobListView;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextPane narrativeField;
    private javax.swing.JProgressBar narrativeProgressBar;
    private javax.swing.JProgressBar sellingProgressBar;
    private javax.swing.JButton sortMobListButton;
    // End of variables declaration//GEN-END:variables

    public void setCharacterSheet(CharacterSheet sheet) {
        this.characterSheet = sheet;
        characterSheetModel.addElement("STR: " + sheet.getStr());
        characterSheetModel.addElement("CON: " + sheet.getCon());
        characterSheetModel.addElement("DEX: " + sheet.getDex());
        characterSheetModel.addElement("INT: " + sheet.getInt());
        nameLabel.setText(sheet.getName());
    }
}
